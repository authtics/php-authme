<?php
/**
 * AuthenticationResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  GeneratedAuthMe
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Authtics API
 *
 * APIs for authentication and signing
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: askme@authtics.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeneratedAuthMe\Model;

use \ArrayAccess;
use \GeneratedAuthMe\ObjectSerializer;

/**
 * AuthenticationResponse Class Doc Comment
 *
 * @category Class
 * @package  GeneratedAuthMe
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AuthenticationResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuthenticationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'response' => 'string',
        'username' => 'string',
        'tbs' => 'string',
        'public_key' => 'string',
        'signed_data' => 'string',
        'last_successful_login' => 'string',
        'last_rejected_login' => 'string',
        'last_failed_login' => 'string',
        'application_id' => 'string',
        'application_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'response' => null,
        'username' => null,
        'tbs' => null,
        'public_key' => null,
        'signed_data' => null,
        'last_successful_login' => null,
        'last_rejected_login' => null,
        'last_failed_login' => null,
        'application_id' => null,
        'application_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'response' => 'response',
        'username' => 'username',
        'tbs' => 'tbs',
        'public_key' => 'publicKey',
        'signed_data' => 'signedData',
        'last_successful_login' => 'lastSuccessfulLogin',
        'last_rejected_login' => 'lastRejectedLogin',
        'last_failed_login' => 'lastFailedLogin',
        'application_id' => 'applicationId',
        'application_name' => 'applicationName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'response' => 'setResponse',
        'username' => 'setUsername',
        'tbs' => 'setTbs',
        'public_key' => 'setPublicKey',
        'signed_data' => 'setSignedData',
        'last_successful_login' => 'setLastSuccessfulLogin',
        'last_rejected_login' => 'setLastRejectedLogin',
        'last_failed_login' => 'setLastFailedLogin',
        'application_id' => 'setApplicationId',
        'application_name' => 'setApplicationName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'response' => 'getResponse',
        'username' => 'getUsername',
        'tbs' => 'getTbs',
        'public_key' => 'getPublicKey',
        'signed_data' => 'getSignedData',
        'last_successful_login' => 'getLastSuccessfulLogin',
        'last_rejected_login' => 'getLastRejectedLogin',
        'last_failed_login' => 'getLastFailedLogin',
        'application_id' => 'getApplicationId',
        'application_name' => 'getApplicationName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RESPONSE_ACCEPTED = 'ACCEPTED';
    const RESPONSE_REJECTED = 'REJECTED';
    const RESPONSE_TIMEOUT = 'TIMEOUT';
    const RESPONSE_FAILED = 'FAILED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResponseAllowableValues()
    {
        return [
            self::RESPONSE_ACCEPTED,
            self::RESPONSE_REJECTED,
            self::RESPONSE_TIMEOUT,
            self::RESPONSE_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['response'] = $data['response'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['tbs'] = $data['tbs'] ?? null;
        $this->container['public_key'] = $data['public_key'] ?? null;
        $this->container['signed_data'] = $data['signed_data'] ?? null;
        $this->container['last_successful_login'] = $data['last_successful_login'] ?? null;
        $this->container['last_rejected_login'] = $data['last_rejected_login'] ?? null;
        $this->container['last_failed_login'] = $data['last_failed_login'] ?? null;
        $this->container['application_id'] = $data['application_id'] ?? null;
        $this->container['application_name'] = $data['application_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['response'] === null) {
            $invalidProperties[] = "'response' can't be null";
        }
        $allowedValues = $this->getResponseAllowableValues();
        if (!is_null($this->container['response']) && !in_array($this->container['response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'response', must be one of '%s'",
                $this->container['response'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string $response response
     *
     * @return self
     */
    public function setResponse($response)
    {
        $allowedValues = $this->getResponseAllowableValues();
        if (!in_array($response, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'response', must be one of '%s'",
                    $response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets tbs
     *
     * @return string|null
     */
    public function getTbs()
    {
        return $this->container['tbs'];
    }

    /**
     * Sets tbs
     *
     * @param string|null $tbs tbs
     *
     * @return self
     */
    public function setTbs($tbs)
    {
        $this->container['tbs'] = $tbs;

        return $this;
    }

    /**
     * Gets public_key
     *
     * @return string|null
     */
    public function getPublicKey()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     *
     * @param string|null $public_key public_key
     *
     * @return self
     */
    public function setPublicKey($public_key)
    {
        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets signed_data
     *
     * @return string|null
     */
    public function getSignedData()
    {
        return $this->container['signed_data'];
    }

    /**
     * Sets signed_data
     *
     * @param string|null $signed_data signed_data
     *
     * @return self
     */
    public function setSignedData($signed_data)
    {
        $this->container['signed_data'] = $signed_data;

        return $this;
    }

    /**
     * Gets last_successful_login
     *
     * @return string|null
     */
    public function getLastSuccessfulLogin()
    {
        return $this->container['last_successful_login'];
    }

    /**
     * Sets last_successful_login
     *
     * @param string|null $last_successful_login last_successful_login
     *
     * @return self
     */
    public function setLastSuccessfulLogin($last_successful_login)
    {
        $this->container['last_successful_login'] = $last_successful_login;

        return $this;
    }

    /**
     * Gets last_rejected_login
     *
     * @return string|null
     */
    public function getLastRejectedLogin()
    {
        return $this->container['last_rejected_login'];
    }

    /**
     * Sets last_rejected_login
     *
     * @param string|null $last_rejected_login last_rejected_login
     *
     * @return self
     */
    public function setLastRejectedLogin($last_rejected_login)
    {
        $this->container['last_rejected_login'] = $last_rejected_login;

        return $this;
    }

    /**
     * Gets last_failed_login
     *
     * @return string|null
     */
    public function getLastFailedLogin()
    {
        return $this->container['last_failed_login'];
    }

    /**
     * Sets last_failed_login
     *
     * @param string|null $last_failed_login last_failed_login
     *
     * @return self
     */
    public function setLastFailedLogin($last_failed_login)
    {
        $this->container['last_failed_login'] = $last_failed_login;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string|null
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id application_id
     *
     * @return self
     */
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets application_name
     *
     * @return string|null
     */
    public function getApplicationName()
    {
        return $this->container['application_name'];
    }

    /**
     * Sets application_name
     *
     * @param string|null $application_name application_name
     *
     * @return self
     */
    public function setApplicationName($application_name)
    {
        $this->container['application_name'] = $application_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


